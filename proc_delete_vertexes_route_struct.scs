// Находит начало структуры маршрута _route_struct.
// Наденную вершину возвращает в _route_begin.
scp_program -> proc_delete_vertexes_route_struct (*
	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _route_struct;;
		-> rrel_2: rrel_in: _route;;
	*);;

	-> rrel_operators: ... (*
//	Начальной считается вершина, в которую нет входящих бинарных дуг.
//	Переберем все вершины и проверим их на это свойство.

//	Копируем множество вершин структуры маршрута для итерации
		-> rrel_init:  ..proc_get_route_struct_begin_operator1 (*
			 <- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _route_struct;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;
		
			->rrel_set_3: rrel_assign: rrel_scp_var: _vertexes_set;;
			=> nrel_then: ..proc_print_route_operator3;;		
		 	=> nrel_else: ..proc_get_route_struct_begin_operator_return;;	
		*);;

			-> ..proc_print_route_operator3 (*
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_route_visit;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_assign: rrel_scp_var: _route_visit;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_print_route_operator4;;
		*);;

		-> ..proc_print_route_operator4 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_get_route_struct_begin_operator2;;
		*);;

//	Итерация по всем вершинам-посещениям.		
		-> ..proc_get_route_struct_begin_operator2 (*
			<-searchElStr3;;
			
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertexes_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex;;
			
			=> nrel_then: ..proc_get_route_struct_begin_operator6;;		
		 	=> nrel_else: ..proc_get_route_struct_begin_operator_return;;
		*);;

//	Очистка памяти.
		-> ..proc_get_route_struct_begin_operator6 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_pos_const_perm: rrel_scp_var: rrel_erase: _arc2;;

			=> nrel_goto: ..proc_get_route_struct_begin_operator8;;
		*);;

		-> ..proc_get_route_struct_begin_operator7(*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertex;;
			-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _value;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: _route_visit;;
		
			=> nrel_then: ..proc_get_route_struct_begin_operator8;;		
		 	=> nrel_else: ..proc_get_route_struct_begin_operator_return;;
		*);;

		-> ..proc_get_route_struct_begin_operator8 (*
			<- eraseElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertex;;
			-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: rrel_erase: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: rrel_node: _value;;
			-> rrel_4: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _route_visit;;
			
			=> nrel_goto: ..proc_get_route_struct_begin_operator2;;
		*);;

		-> ..proc_get_route_struct_begin_operator_return (*
			<- return;;
		*);;
	*);;
*);;
