scp_program -> proc_main (*
	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _graph;;
	*);;

	-> rrel_operators: ... (*

	//Создаем ссылку, хранящую максимальное число точек в кратчайшем пути, т.е. число точек в диаметре
	-> rrel_init: ..proc_main_operator_create_count_diamter_vertex_number1 (*
		 	<- genEl;;
	   		-> rrel_1: rrel_assign: rrel_node: rrel_link: rrel_const: rrel_scp_var: _count_of_diametr_vertexes;;

			=> nrel_goto: ..proc_main_operator_create_count_diamter_vertex_number2;; 	
	*);;

	//Вносим значение в _count_of_diametr_vertexes
	-> ..proc_main_operator_create_count_diamter_vertex_number2 (*
        <- contAssign;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_diametr_vertexes;;
	    -> rrel_2: rrel_fixed: rrel_scp_const: [0];;

	    => nrel_goto: ..proc_main_operator1;;
        *);;

	//Вносим все вершины во множество непроверенных
	-> ..proc_main_operator1 (*
		<- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;

		->rrel_set_3: rrel_assign: rrel_scp_var: _vertexes_set;;

		=> nrel_then: ..proc_main_operator2;;
		=> nrel_else: ..proc_main_operator_return;;
	*);;
	
	//Находим элемент непроверенных вершин
	-> ..proc_main_operator2 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertexes_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _cur_vertex;;

			=> nrel_then: ..proc_main_operator3;;
			=> nrel_else: ..proc_run_operator_erase_not_checked_vertexes;;
	*);;
	
	//Удаляем дугу, для дальнейшего итерирования
	-> ..proc_main_operator3 (*
				<- eraseEl;;
				-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;
				=>nrel_goto: ..proc_main_operator_print_4;;  // ВЫВОД ДЛЯ ДЕБАГА
	*);;

	//ВЫВОД ДЛЯ ДЕБАГА
	-> ..proc_main_operator_print_4 (* 
				<-printEl;;
				-> rrel_1: rrel_fixed: rrel_scp_var: _cur_vertex;;
				=> nrel_goto: ..proc_main_operator4;;
	*);;

	//Создаем новое множество для перебора путей
	-> ..proc_main_operator4 (*
			<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;

			->rrel_set_3: rrel_assign: rrel_scp_var: _iterate_vertexes_set;;

			=> nrel_then: ..proc_main_operator_delete_cur_vertex1;;
			=> nrel_else: ..proc_main_operator_return;;
	*);;

	//Находим текущую вершину для удаления ее из итерируемых
	-> ..proc_main_operator_delete_cur_vertex1 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _iterate_vertexes_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _cur_vertex;;

			=> nrel_then: ..proc_main_operator_delete_cur_vertex2;;
			=> nrel_else: ..proc_main_operator5;;
	*);;

	//Удаляем текущую вершину из итерируемых
	-> ..proc_main_operator_delete_cur_vertex2 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc2;;

			=> nrel_goto: ..proc_main_operator5;;
	*);;

	//Берем элемент для итерации
	-> ..proc_main_operator5 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _iterate_vertexes_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _cur_iterate_vertex;;

			=> nrel_then: ..proc_main_operator6;;
			=> nrel_else: ..proc_main_erase_iterate_vertexes;;
	*);;

	//Удаляем дугу, для дальнейшего итерирования
	-> ..proc_main_operator6 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			=>nrel_goto: ..proc_main_operator_create_count_vertex_number1;;  
	*);;

	//Создаем ссылку, хранящую число точек в кратчайшем пути
	-> ..proc_main_operator_create_count_vertex_number1 (*
		 	<- genEl;;
	   		-> rrel_1: rrel_assign: rrel_node: rrel_link: rrel_const: rrel_scp_var: _count_of_vertexes;;

			=> nrel_goto: ..proc_main_operator_create_count_vertex_number2;; 	
	*);;

	//Вносим значение в _count_of_vertexes, хранящую число точек в кратчайшем пути
	-> ..proc_main_operator_create_count_vertex_number2 (*
        <- contAssign;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
	    -> rrel_2: rrel_fixed: rrel_scp_const: [0];;

	    => nrel_goto: ..proc_main_operator7;;
        *);;
	
	//ВЫВОД ДЛЯ ДЕБАГА
	/*-> ..proc_main_operator_print_7 (* 
			<-printEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _cur_iterate_vertex;;
			=> nrel_goto: ..proc_main_operator5;;
	*);;*/


	//Вызов поиска мин путей
	-> ..proc_main_operator7 (*
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_find_min_path;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _cur_vertex;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _cur_iterate_vertex;;
				-> rrel_4: rrel_assign: rrel_scp_var: _route;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			
			=> nrel_goto: ..proc_main_operator8;;
	*);;

	-> ..proc_main_operator8 (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

		=> nrel_goto: ..proc_main_print_route;;
	*);;

	//Вывод кратчайшего пути
	-> ..proc_main_print_route (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_print_route;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_print_route2;;
		*);;

	-> ..proc_main_print_route2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_get_sum_count_vertex_number1;;
		*);;

	//Считаем точки в кратчайшем пути
	-> ..proc_main_operator_get_sum_count_vertex_number1 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_count_of_route_vertexes;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_get_sum_count_vertex_number2;;
	*);;

	-> ..proc_main_operator_get_sum_count_vertex_number2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_get_sum_count_vertex_number3;;
		*);;

	//Вывод количества точек в кратчайшем пути
	->..proc_main_operator_get_sum_count_vertex_number3 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ Число точек в кратчайшем пути: ];;

			=>nrel_goto: ..proc_main_operator_get_sum_count_vertex_number4;;
		*);;

	-> ..proc_main_operator_get_sum_count_vertex_number4 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
			=> nrel_goto: ..proc_main_operator_comparison;;
	*);;
	
	//Сравниваем количество точек в крат маршруте и кол-во точек в потенциальном диаметре
	-> ..proc_main_operator_comparison (*
		<- ifGr;;
		-> rrel_1: rrel_scp_var: _count_of_vertexes;;
		-> rrel_2: rrel_scp_var:_count_of_diametr_vertexes;;
		=> nrel_then: ..proc_main_operator_comparison_yes;;
		=> nrel_else: ..proc_main_delete_route;;
	*);;
	
	//Для переделки: если больше, то удаляем множества, хранящие дуги и вершины диаметра, 
	//создаем новые и заносим в них новые вершины диаметра, меняем количество вершин в потенциальном диаметре
	//Если меньше либо равно, проверяем равны ли кол-ва вершин в диаметре, если равны, то запихиваем во множества, иначе идем дальше
	
	
	//Если в кратчайшем пути больше точек, чем в потенциальном диаметре, то копируем значение
	-> ..proc_main_operator_comparison_yes (* 
		<-contAssign;;
		-> rrel_1: rrel_assign: rrel_scp_var: _count_of_diametr_vertexes;;
		-> rrel_2: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
		
		=> nrel_goto: ..proc_main_delete_route;;
	*);;

/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
	//Удаление структуры маршрута
	-> ..proc_main_delete_route (*
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_delete_route_struct;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _graph;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			
			=> nrel_goto: ..proc_main_delete_route2;;
	*);;

	-> ..proc_main_delete_route2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_erase_count_vertex_number;;
	*);;
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

	// Удаление count_of_vertex, хранящую число точек в кратчайшем пути
	-> ..proc_main_operator_erase_count_vertex_number (*
			<- eraseEl;;
            -> rrel_1 : rrel_fixed : rrel_erase: rrel_scp_var : _count_of_vertexes;;

            => nrel_goto : ..proc_main_operator5;;
	*);;

	//Если закончились элементы для поиска пути, берем следующий из непроверенных и опять перебираем
	-> ..proc_main_erase_iterate_vertexes (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _iterate_vertexes_set;;

			=> nrel_goto: ..proc_main_operator2;;
		*);;

	//Если закончились элементы непроверенных вершин, то на выход
	-> ..proc_run_operator_erase_not_checked_vertexes (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _vertexes_set;;

			=> nrel_goto: ..proc_main_operator_get_diametr_count_vertex_number1;;
		*);;
	
	//Вывод количества вершин в диаметре
	->..proc_main_operator_get_diametr_count_vertex_number1 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ Число точек в диаметре: ];;

			=>nrel_goto: ..proc_main_operator_get_diametr_count_vertex_number2;;
		*);;

	-> ..proc_main_operator_get_diametr_count_vertex_number2 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_diametr_vertexes;;
			=> nrel_goto: ..proc_main_operator_erase_diametr_count_vertex_number;;
	*);;

	//Удаление количества вершин в диаметре
	-> ..proc_main_operator_erase_diametr_count_vertex_number (*
			<- eraseEl;;
            -> rrel_1 : rrel_fixed : rrel_erase: rrel_scp_var : _count_of_diametr_vertexes;;

            => nrel_goto : ..proc_main_operator_return;;
	*);;
		-> ..proc_main_operator_return (*
			<- return;;
		*);;
	*);;
*);;
