scp_program -> proc_main (*
	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _graph;;
	*);;

	-> rrel_operators: ... (*

	//Создаем ссылку, хранящую максимальное число точек в кратчайшем пути, т.е. число точек в диаметре
	-> rrel_init: ..proc_main_operator_create_count_diamter_vertex_number1 (*
		 	<- genEl;;
	   		-> rrel_1: rrel_assign: rrel_node: rrel_link: rrel_const: rrel_scp_var: _count_of_diametr_vertexes;;

			=> nrel_goto: ..proc_main_operator_create_count_diamter_vertex_number2;; 	
	*);;

	//Вносим значение в _count_of_diametr_vertexes
	-> ..proc_main_operator_create_count_diamter_vertex_number2 (*
        <- contAssign;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_diametr_vertexes;;
	    -> rrel_2: rrel_fixed: rrel_scp_const: [0];;

	    => nrel_goto: ..proc_main_operator_create_set_diam;;
        *);;

	//Создаем множество, хранящее вершины диаметров
	-> ..proc_main_operator_create_set_diam (*
		<-genEl;;
		-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _diam_vertex_set;;

		=> nrel_goto: ..proc_main_operator_create_set_diam2;;
	*);;

	//Создаем мно-во хранящее ребра диаметров
	-> ..proc_main_operator_create_set_diam2 (*
		<-genEl;;
		-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _diam_edges_set;;

		=> nrel_goto: ..proc_main_operator_create_set_diam3;;
	*);;
	
	//Создаем мн-во хранящее уже посещенные вершины при построении графа
	-> ..proc_main_operator_create_set_diam3 (*
		<-genEl;;
		-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _visited_graph_create_vertex;;

		=> nrel_goto: ..proc_main_operator1;;
	*);;

	//Вносим все вершины во множество непроверенных
	-> ..proc_main_operator1 (*
		<- searchSetStr5;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
		-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
		-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
		-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;

		->rrel_set_3: rrel_assign: rrel_scp_var: _vertexes_set;;

		=> nrel_then: ..proc_main_operator2;;
		=> nrel_else: ..proc_main_operator_return;;
	*);;
	
	//Находим элемент непроверенных вершин
	-> ..proc_main_operator2 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertexes_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _cur_vertex;;

			=> nrel_then: ..proc_main_operator3;;
			=> nrel_else: ..proc_run_operator_erase_not_checked_vertexes;;
	*);;
	
	//Удаляем дугу, для дальнейшего итерирования
	-> ..proc_main_operator3 (*
				<- eraseEl;;
				-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;
				=>nrel_goto: ..proc_main_operator4;;  // ВЫВОД ДЛЯ ДЕБАГА
	*);;

	//ВЫВОД ДЛЯ ДЕБАГА
	-> ..proc_main_operator_print_4 (* 
				<-printEl;;
				-> rrel_1: rrel_fixed: rrel_scp_var: _cur_vertex;;
				=> nrel_goto: ..proc_main_operator4;;
	*);;

	//Создаем новое множество для перебора путей
	-> ..proc_main_operator4 (*
			<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;

			->rrel_set_3: rrel_assign: rrel_scp_var: _iterate_vertexes_set;;

			=> nrel_then: ..proc_main_operator_delete_cur_vertex1;;
			=> nrel_else: ..proc_main_operator_return;;
	*);;

	//Находим текущую вершину для удаления ее из итерируемых
	-> ..proc_main_operator_delete_cur_vertex1 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _iterate_vertexes_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _cur_vertex;;

			=> nrel_then: ..proc_main_operator_delete_cur_vertex2;;
			=> nrel_else: ..proc_main_operator5;;
	*);;

	//Удаляем текущую вершину из итерируемых
	-> ..proc_main_operator_delete_cur_vertex2 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _arc2;;

			=> nrel_goto: ..proc_main_operator5;;
	*);;

	//Берем элемент для итерации
	-> ..proc_main_operator5 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _iterate_vertexes_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _cur_iterate_vertex;;

			=> nrel_then: ..proc_main_operator6;;
			=> nrel_else: ..proc_main_erase_iterate_vertexes;;
	*);;

	//Удаляем дугу, для дальнейшего итерирования
	-> ..proc_main_operator6 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			=>nrel_goto: ..proc_main_operator_create_count_vertex_number1;;  
	*);;

	//Создаем ссылку, хранящую число точек в кратчайшем пути
	-> ..proc_main_operator_create_count_vertex_number1 (*
		 	<- genEl;;
	   		-> rrel_1: rrel_assign: rrel_node: rrel_link: rrel_const: rrel_scp_var: _count_of_vertexes;;

			=> nrel_goto: ..proc_main_operator_create_count_vertex_number2;; 	
	*);;

	//Вносим значение в _count_of_vertexes, хранящую число точек в кратчайшем пути
	-> ..proc_main_operator_create_count_vertex_number2 (*
        <- contAssign;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
	    -> rrel_2: rrel_fixed: rrel_scp_const: [0];;

	    => nrel_goto: ..proc_main_operator7;;
        *);;
	
	//ВЫВОД ДЛЯ ДЕБАГА
	/*-> ..proc_main_operator_print_7 (* 
			<-printEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _cur_iterate_vertex;;
			=> nrel_goto: ..proc_main_operator5;;
	*);;*/


	//Вызов поиска мин путей
	-> ..proc_main_operator7 (*
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_find_min_path;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _cur_vertex;;
				-> rrel_3: rrel_fixed: rrel_scp_var: _cur_iterate_vertex;;
				-> rrel_4: rrel_assign: rrel_scp_var: _route;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			
			=> nrel_goto: ..proc_main_operator8;;
	*);;

	-> ..proc_main_operator8 (*
		<- waitReturn;;
		-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

		=> nrel_goto: ..proc_main_operator_get_sum_count_vertex_number1;;
	*);;

	//Вывод кратчайшего пути
	-> ..proc_main_print_route (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_print_route;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_print_route2;;
		*);;

	-> ..proc_main_print_route2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_get_sum_count_vertex_number1;;
		*);;

	//Считаем точки в кратчайшем пути
	-> ..proc_main_operator_get_sum_count_vertex_number1 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_count_of_route_vertexes;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_get_sum_count_vertex_number2;;
	*);;

	-> ..proc_main_operator_get_sum_count_vertex_number2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_comparison;;
		*);;

	//Вывод количества точек в кратчайшем пути
	->..proc_main_operator_get_sum_count_vertex_number3 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ Число точек в кратчайшем пути: ];;

			=>nrel_goto: ..proc_main_operator_get_sum_count_vertex_number4;;
		*);;

	-> ..proc_main_operator_get_sum_count_vertex_number4 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
			=> nrel_goto: ..proc_main_operator_comparison;;
	*);;
	
	//Сравниваем количество точек в крат маршруте и кол-во точек в потенциальном диаметре
	-> ..proc_main_operator_comparison (*
		<- ifGr;;
		-> rrel_1: rrel_scp_var: _count_of_vertexes;;
		-> rrel_2: rrel_scp_var:_count_of_diametr_vertexes;;
		=> nrel_then: ..proc_main_operator_comparison_yes;;
		=> nrel_else: ..proc_main_operator_comparison_no;; //Сделать переход если нет, то проверяем одинаковое ли количество точек
	*);;
	
	//Для переделки: если больше, то удаляем множества, хранящие дуги и вершины диаметра, 
	//создаем новые и заносим в них новые вершины диаметра, меняем количество вершин в потенциальном диаметре
	//Если меньше либо равно, проверяем равны ли кол-ва вершин в диаметре, если равны, то запихиваем во множества, иначе идем дальше
	
	
	//Если в кратчайшем пути больше точек, чем в потенциальном диаметре, то копируем значение
	-> ..proc_main_operator_comparison_yes (* 
		<-contAssign;;
		-> rrel_1: rrel_assign: rrel_scp_var: _count_of_diametr_vertexes;;
		-> rrel_2: rrel_fixed: rrel_scp_var: _count_of_vertexes;;
		
		=> nrel_goto: ..proc_main_operator_diam_set1;; //proc_main_delete_route
	*);;

	//Удаляем старое множество вершин диаметров 
	-> ..proc_main_operator_diam_set1 (*
		<- eraseEl;;
		-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: _diam_vertex_set;;
		
		=>nrel_goto: ..proc_main_operator_diam_set2;;
	*);;

	//Создаем новое множество вершин диаметров
	-> ..proc_main_operator_diam_set2 (*
		<- genEl;;
		-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _diam_vertex_set;;
		
		=>nrel_goto: ..proc_main_operator_diam_set3;;
	*);;

	//Вызываем функцию, которая добавляет вершины во множество вершин диаметров
	-> ..proc_main_operator_diam_set3 (*
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_diam_vertexes;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _diam_vertex_set;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			
			=>nrel_goto: ..proc_main_operator_diam_set4;;
	*);;

	-> ..proc_main_operator_diam_set4 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=>nrel_goto: ..proc_main_delete_route;;
	*);;

	//Проверка если точек равное количество
	-> ..proc_main_operator_comparison_no (* 
			<-ifEq;;
			-> rrel_1: rrel_scp_var: _count_of_vertexes;;
			-> rrel_2: rrel_scp_var: _count_of_diametr_vertexes;;
			
			=> nrel_then: ..proc_main_operator_diam_set5;;
			=> nrel_else: ..proc_main_delete_route;;
	*);;

	-> ..proc_main_operator_diam_set5 (*
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_diam_vertexes;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _diam_vertex_set;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			
			=>nrel_goto: ..proc_main_operator_diam_set6;;
	*);;

	-> ..proc_main_operator_diam_set6 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=>nrel_goto: ..proc_main_delete_route;;
	*);;


/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
	//Удаление структуры маршрута
	-> ..proc_main_delete_route (*
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_delete_route_struct;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _graph;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;
			
			=> nrel_goto: ..proc_main_delete_route2;;
	*);;

	-> ..proc_main_delete_route2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_main_operator_erase_count_vertex_number;;
	*);;
/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/

	// Удаление count_of_vertex, хранящую число точек в кратчайшем пути
	-> ..proc_main_operator_erase_count_vertex_number (*
			<- eraseEl;;
            -> rrel_1 : rrel_fixed : rrel_erase: rrel_scp_var : _count_of_vertexes;;

            => nrel_goto : ..proc_main_operator5;;
	*);;

	//Если закончились элементы для поиска пути, берем следующий из непроверенных и опять перебираем
	-> ..proc_main_erase_iterate_vertexes (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _iterate_vertexes_set;;

			=> nrel_goto: ..proc_main_operator2;;
		*);;

	//Если закончились элементы непроверенных вершин, то на выход
	-> ..proc_run_operator_erase_not_checked_vertexes (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _vertexes_set;;

			=> nrel_goto: ..proc_main_operator_erase_diametr_count_vertex_number;;
		*);;
	
	//Вывод количества вершин в диаметре
	->..proc_main_operator_get_diametr_count_vertex_number1 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ Число точек в диаметре: ];;

			=>nrel_goto: ..proc_main_operator_get_diametr_count_vertex_number2;;
		*);;

	-> ..proc_main_operator_get_diametr_count_vertex_number2 (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _count_of_diametr_vertexes;;
			=> nrel_goto: ..proc_main_operator_erase_diametr_count_vertex_number;;
	*);;

	//Удаление количества вершин в диаметре
	-> ..proc_main_operator_erase_diametr_count_vertex_number (*
			<- eraseEl;;
            -> rrel_1 : rrel_fixed : rrel_erase: rrel_scp_var : _count_of_diametr_vertexes;;

            => nrel_goto : ..proc_main_operator_get_diametr_edges1;; //return
	*);;

	//Чтобы получить ребра надо переделать функцию proc_get_other_vertex_incidence_edge
	//А именно: Надо идти по ребрам графа, закидывать ребро в функцию,
	//Там изменить на проверку совпадений вершин, на проверку содержатся ли они во множестве вершин графа
	//Если да, то закидываем это ребро во множество ребер графа
	//После этого строить структуру	 

	//Получаем множество ребер графа
	-> ..proc_main_operator_get_diametr_edges1 (*
		 	<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_edge;;
		
			->rrel_set_3: rrel_assign: rrel_scp_var: _set_edges;;

			=> nrel_then: ..proc_main_operator_get_diametr_edges2;;		
		 	=> nrel_else: ..proc_main_operator_create_graph1;;	//create graph
	*);;

	//Запускаем поиск ребер 
	-> ..proc_main_operator_get_diametr_edges2 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _set_edges;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _cur_edge;;

			=> nrel_then: ..proc_main_operator_get_diametr_edges3;;
			=> nrel_else: ..proc_main_operator_create_graph1;; //create graph
	*);;

	//Удаляем связь, для дальнейшего итерирования

	-> ..proc_main_operator_get_diametr_edges3 (* 
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			
			=>nrel_goto: ..proc_main_operator_get_diametr_edges4;; 
	*);;

	-> ..proc_main_operator_get_diametr_edges4 (* 
			<- searchElStr3;;
			-> rrel_1: rrel_assign: rrel_scp_var: _temp_vertex1;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _cur_edge;;
			-> rrel_3: rrel_assign: rrel_scp_var: _temp_vertex2;;	

			=> nrel_then: ..proc_main_operator_get_diametr_edges5;;
			=> nrel_else: ..proc_main_operator_get_diametr_edges2;;
	*);;

	

	-> ..proc_main_operator_get_diametr_edges5 (* 
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diam_vertex_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _temp_vertex1;;

			=> nrel_then: ..proc_main_operator_get_diametr_edges6;;
			=> nrel_else: ..proc_main_operator_get_diametr_edges2;;
	*);;

	-> ..proc_main_operator_get_diametr_edges6 (* 
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diam_vertex_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _temp_vertex2;;

			=> nrel_then: ..proc_main_operator_get_diametr_edges7;;
			=> nrel_else: ..proc_main_operator_get_diametr_edges2;;
	*);;

	-> ..proc_main_operator_get_diametr_edges7 (* 
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diam_edges_set;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _cur_edge;;
			
			=> nrel_goto: ..proc_main_operator_get_diametr_edges2;;
	*);;

	//Формируем структуру
	//Делаем связку отношений. ВЫБИВАЕТ ОШИБКИ
		-> ..proc_main_operator_create_graph1 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _diams;;

			=> nrel_goto: ..proc_main_operator_create_graph2;;
		*);;
		//Делаем структуру диаметров
		-> ..proc_main_operator_create_graph2 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _diams_struct;;

			=> nrel_goto: ..proc_main_operator_create_graph3;;
		*);;
		//Делаем отношение посещенных вершин диаметров
		-> ..proc_main_operator_create_graph3 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_node: rrel_scp_var: _diams_visit;;

			=> nrel_goto: ..proc_main_operator_create_graph4;;
		*);;
		//Связываем понятие графа и структуру
		-> ..proc_main_operator_create_graph4 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: directed_graph;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _diams_struct;;

			=> nrel_goto: ..proc_main_operator_create_graph5;;
		*);;

		//	Добавим все компоненты в связку отношений диаметров.
		-> ..proc_main_operator_create_graph5 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diams;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _diams_struct;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_1;;

			=> nrel_goto: ..proc_main_operator_create_graph6;;
		*);;
		
		-> ..proc_main_operator_create_graph6 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diams;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_2;;

			=> nrel_goto: ..proc_main_operator_create_graph7;;
		*);;

		-> ..proc_main_operator_create_graph7 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diams;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _diams_visit;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_3;;

			=> nrel_goto: ..proc_main_operator_create_graph8;;
		*);;
		
		-> ..proc_main_operator_create_graph8 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: nrel_graph_consist_of_diameters;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _diams;;

			=> nrel_goto: ..proc_main_operator_create_graph10;;
		*);;
		
		//Копируем вершины диаметров в другое множество
		-> ..proc_main_operator_create_graph9 (*
			<- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_const: _diam_vertex_set;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_node: rrel_scp_var: _el3;;

			-> rrel_set_3: rrel_assign: rrel_scp_var: _copy_diam_vertex_set;;
			
			=> nrel_then: ..proc_main_operator_create_graph10;;	
			=> nrel_else: ..proc_main_operator_create_graph16;;
		*);;
		
		//Итерируемся по вершинам диаметров
		-> ..proc_main_operator_create_graph10 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diam_vertex_set;;
			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _d_vert;;

			=> nrel_then: ..proc_main_operator_create_graph11;;
			=> nrel_else: ..proc_main_operator_create_graph16;;
		*);;

		-> ..proc_main_operator_create_graph11 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;				
			
			=>nrel_goto: ..proc_main_operator_create_graph12;;  
		*);;

		-> ..proc_main_operator_create_graph12 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_node: rrel_const: rrel_scp_var: _vertex_visit;;
			
			=> nrel_goto: ..proc_main_operator_create_graph13;;
		*);;

		-> ..proc_main_operator_create_graph13 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diams_struct;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _vertex_visit;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;

			=> nrel_goto: ..proc_main_operator_create_graph14;;
		*);;

		-> ..proc_main_operator_create_graph14 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertex_visit;;
			-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _d_vert;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _diams_visit;;
		
			=> nrel_goto: ..proc_main_operator_create_graph10;;
		*);;
		
		-> ..proc_main_operator_create_graph15 (*
			<-printEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _d_vert;;

			=> nrel_goto: ..proc_main_operator_create_graph10;;
		*);;

		//Добавляем ребра 
		-> ..proc_main_operator_create_graph16 (*
			<-searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diam_edges_set;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _cur_edge;;

			=> nrel_then: ..proc_main_operator_create_graph17;;
			=> nrel_else: ..proc_main_operator_return;;
			*);;



		-> ..proc_main_operator_create_graph17 (*
				<- eraseEl;;
				-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;
						
				=>nrel_goto: ..proc_main_operator_create_graph18;;  
			*);;

		-> ..proc_main_operator_create_graph18 (*
			<-searchElStr3;;
			-> rrel_1: rrel_assign: rrel_scp_var: _temp_vertex1;;
			-> rrel_2: rrel_fixed: rrel_scp_var: _cur_edge;;
			-> rrel_3: rrel_assign: rrel_scp_var: _temp_vertex2;;	
			
			=> nrel_then: ..proc_main_operator_create_graph19;;
			=> nrel_else: ..proc_main_operator_create_graph16;;
		*);;


		-> ..proc_main_operator_create_graph19 (*
			<-searchElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _st_vert1;;
			-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _temp_vertex1;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _diams_visit;;
			
			=> nrel_then: ..proc_main_operator_create_graph20;;
			=> nrel_else: ..proc_main_operator_create_graph16;;
		*);;

		-> ..proc_main_operator_create_graph20 (*
			<-searchElStr5;;
			-> rrel_1: rrel_assign: rrel_scp_var: _st_vert2;;
			-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _temp_vertex2;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_var: _diams_visit;;
			
			=> nrel_then: ..proc_main_operator_create_graph21;;
			=> nrel_else: ..proc_main_operator_create_graph16;;
		*);;
		//Cоздаем дугу между вершинами
		-> ..proc_main_operator_create_graph21 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _temp_vertex1;;
			-> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _edge_visit;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _temp_vertex2;;
			
			=> nrel_goto: ..proc_main_operator_create_graph22;;
		*);;

		//Добавляем в rrel_edge
		-> ..proc_main_operator_create_graph22 (*
			<- genElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _diams_struct;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _edge_visit;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_edge;;

			=> nrel_goto: ..proc_main_operator_create_graph23;;
		*);;
		//Вывод вершин
		-> ..proc_main_operator_create_graph23 (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _temp_vertex1;;
			-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _print_value;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_system_identifier;;
		
			=> nrel_then: ..proc_main_operator_print_new;;		
		 	=> nrel_else: ..proc_main_operator_create_graph16;;
		*);;

		-> ..proc_main_operator_print_new (*
			<-printNl;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [ ];;

			=>nrel_goto: ..proc_main_operator_create_graph24;;
		*);;

		-> ..proc_main_operator_create_graph24 (*
			<-print;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _print_value;;

			=>nrel_goto: ..proc_main_operator_create_graph25;;
		*);;

		-> ..proc_main_operator_create_graph25 (*
			<-print;;
			-> rrel_1: rrel_fixed: rrel_scp_const: [<==>];;

			=>nrel_goto: ..proc_main_operator_create_graph26;;
		*);;

		-> ..proc_main_operator_create_graph26 (*
			<- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _temp_vertex2;;
			-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _print_value;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_system_identifier;;
		
			=> nrel_then: ..proc_main_operator_create_graph27;;		
		 	=> nrel_else: ..proc_main_operator_create_graph16;;
		*);;

		-> ..proc_main_operator_create_graph27 (*
			<-print;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _print_value;;

			=>nrel_goto: ..proc_main_operator_create_graph16;;
		*);;

		

		//Соединяем диаметров вершины между собой


	//Вывод точек, содержащихся в диаметре
//	-> ..proc_main_operator_print_diam_vert1 (*
//			<- searchElStr3;;
//			-> rrel_1: rrel_fixed: rrel_scp_var: _diam_vertex_set;;
//			-> rrel_2: rrel_assign: rrel_scp_var: rrel_pos_const_perm: _arc2;;
//			-> rrel_3: rrel_assign: rrel_scp_var: _vert;;
//
//			=> nrel_then: ..proc_main_operator_print_diam_vert2;;
//			=> nrel_else: ..proc_main_operator_return;;
//	*);;
//
//	-> ..proc_main_operator_print_diam_vert2 (*
//				<- eraseEl;;
//				-> rrel_1: rrel_fixed: rrel_erase: rrel_scp_var: rrel_pos_const_perm: _arc2;;
//				
//				=>nrel_goto: ..proc_main_operator_print_diam_vert3;;  
//	*);;
//
//	-> ..proc_main_operator_print_diam_vert3 (* 
//				<-printEl;;
//				-> rrel_1: rrel_fixed: rrel_scp_var: _vert;;
//				
//				=> nrel_goto: ..proc_main_operator_print_diam_vert1;;
//	*);;

		-> ..proc_main_operator_return (*
			<- return;;
		*);;
	*);;
*);;
