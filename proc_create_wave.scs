scp_program -> proc_create_wave (*	
	-> rrel_params: ... (*
		-> rrel_1: rrel_in: _graph;;
		-> rrel_2: rrel_in: _wave;;
		-> rrel_3: rrel_in: _not_checked_vertexes;;
		-> rrel_4: rrel_out: _new_wave;;
	*);;

	-> rrel_operators: ... (*
//	Создаем новую волну.
		-> rrel_init: ..proc_create_wave_operator1 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _new_wave;;

			=> nrel_goto: ..proc_create_wave_operator2;;
		*);;	
// Формируем копию волны wave для перебора
		-> ..proc_create_wave_operator2 (*
			 <- searchSetStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _wave;;
			-> rrel_2: rrel_assign: rrel_pos: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
		
			->rrel_set_3: rrel_assign: rrel_scp_var: _wave_copy;;
			=> nrel_then: ..proc_create_wave_operator3;;		
		 	=> nrel_else: ..proc_create_wave_operator_erase_wave_copy;;	
		*);;	
//	Цикл по вершинам в волне wave.
		-> ..proc_create_wave_operator3 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _wave_copy;;
			-> rrel_2: rrel_assign: rrel_pos: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex;;

			=> nrel_then: ..proc_create_wave_operator4;;
			=> nrel_else: ..proc_create_wave_operator_erase_wave_copy;; 
		*);;
		
		-> ..proc_create_wave_operator4 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc2;;

			=> nrel_goto: ..proc_create_wave_operator5;;
		*);;
//	Формируем множество ребер графа для итерации
		-> ..proc_create_wave_operator5 (*
			<- searchSetStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _graph;;
			-> rrel_2: rrel_assign: rrel_pos: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_edge;;
		
			->rrel_set_3: rrel_assign: rrel_scp_var: _edges_set;;
			=> nrel_then: ..proc_create_wave_operator6;;		
		 	=> nrel_else: ..proc_create_wave_operator_erase_wave_copy;;
		*);;		
//	Цикл по ребрам графа.
		-> ..proc_create_wave_operator6 (*
			<- searchElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _edges_set;;
			-> rrel_2: rrel_assign: rrel_pos: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _edge;;

			=> nrel_then: ..proc_create_wave_operator7;;
			=> nrel_else: ..proc_create_wave_operator_erase_edges_set ;;
		*);;
	
		-> ..proc_create_wave_operator7 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc2;;

			=> nrel_goto: ..proc_create_wave_operator8;;
		*);;
//	Поиск вершины инцидентной ребру edge и отличной от вершины vertex
		-> ..proc_create_wave_operator8 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_other_vertex_incidence_edge;;
			-> rrel_2: rrel_fixed: rrel_scp_const: ... (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _edge;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _vertex;;
				-> rrel_3: rrel_assign: rrel_scp_var: _other_vertex;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_create_wave_operator9;;
		*);;

		-> ..proc_create_wave_operator9 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: ..proc_create_wave_operator10;;
		*);;

		-> ..proc_create_wave_operator10 (*
			<- ifVarAssign;;
			-> rrel_1: rrel_scp_fixed: rrel_scp_var: _other_vertex;;

		 	=> nrel_then: ..proc_create_wave_operator11;;
			=> nrel_else: ..proc_create_wave_operator6;;
		*);;
	
		-> ..proc_create_wave_operator11 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _not_checked_vertexes;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _other_vertex;;

			=> nrel_then: ..proc_create_wave_operator12;;
			=> nrel_else: ..proc_create_wave_operator6;; 
		*);;

		-> ..proc_create_wave_operator12 (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc2;;

			=> nrel_goto: ..proc_create_wave_operator13;;
		*);;

		-> ..proc_create_wave_operator13 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _new_wave;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _other_vertex;;

			=> nrel_goto: ..proc_create_wave_operator6;;
		*);;
//  После каждого цикла итерации по ребрам будем выполнять очистку памяти
		-> ..proc_create_wave_operator_erase_edges_set (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _edges_set;;

			=> nrel_goto: ..proc_create_wave_operator3;;
		*);;
// Удаляем копию волны.
		-> ..proc_create_wave_operator_erase_wave_copy (*
			<- eraseEl;;
			-> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _wave_copy;;

			=> nrel_goto: ..proc_create_wave_operator_return;;
		*);;

		-> ..proc_create_wave_operator_return (*
			<- return;;
		*);;
	*);;
*);;
